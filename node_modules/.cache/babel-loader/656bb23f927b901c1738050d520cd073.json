{"ast":null,"code":"import { put, takeEvery } from \"redux-saga/effects\"; // ...\n\nconst getUserName = async () => {\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  const result = await res.json();\n  return result[2].name;\n}; // Our worker Saga: will perform the async increment task\n\n\nexport function* fetchUser() {\n  try {\n    const username = yield getUserName();\n    yield put({\n      type: \"UPDATE_NAME_SUCCESS\",\n      payload: username\n    });\n  } catch (e) {\n    yield put({\n      type: \"UPDATE_NAME_FAILED\",\n      message: e.message\n    });\n  }\n} // Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\n\nexport function* userSaga() {\n  yield takeEvery(\"UPDATE_NAME\", fetchUser);\n}","map":{"version":3,"sources":["/Users/abdemirza/Projects/reduxx/src/userSaga.js"],"names":["put","takeEvery","getUserName","res","fetch","result","json","name","fetchUser","username","type","payload","e","message","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,oBAA/B,C,CAEA;;AACA,MAAMC,WAAW,GAAG,YAAY;AAC9B,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAAvB;AACA,QAAMC,MAAM,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAArB;AACA,SAAOD,MAAM,CAAC,CAAD,CAAN,CAAWE,IAAlB;AACD,CAJD,C,CAKA;;;AACA,OAAO,UAAUC,SAAV,GAAsB;AAC3B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMP,WAAW,EAAlC;AACA,UAAMF,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAE,qBAAR;AAA+BC,MAAAA,OAAO,EAAEF;AAAxC,KAAD,CAAT;AACD,GAHD,CAGE,OAAOG,CAAP,EAAU;AACV,UAAMZ,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAE,oBAAR;AAA8BG,MAAAA,OAAO,EAAED,CAAC,CAACC;AAAzC,KAAD,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUC,QAAV,GAAqB;AAC1B,QAAMb,SAAS,CAAC,aAAD,EAAgBO,SAAhB,CAAf;AACD","sourcesContent":["import { put, takeEvery } from \"redux-saga/effects\";\n\n// ...\nconst getUserName = async () => {\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  const result = await res.json();\n  return result[2 ].name;\n};\n// Our worker Saga: will perform the async increment task\nexport function* fetchUser() {\n  try {\n    const username = yield getUserName();\n    yield put({ type: \"UPDATE_NAME_SUCCESS\", payload: username });\n  } catch (e) {\n    yield put({ type: \"UPDATE_NAME_FAILED\", message: e.message });\n  }\n}\n\n// Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\nexport function* userSaga() {\n  yield takeEvery(\"UPDATE_NAME\", fetchUser);\n}\n"]},"metadata":{},"sourceType":"module"}