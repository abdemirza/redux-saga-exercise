{"ast":null,"code":"import { put, takeEvery, takeLatest } from \"redux-saga/effects\"; // ...\n\nconst getJoke = async () => {\n  const res = await fetch(\"https://api.chucknorris.io/jokes/random\");\n  const result = await res.json();\n  return result.value;\n}; // Our worker Saga: will perform the async increment task\n\n\nfunction* fetchJoke() {\n  try {\n    const joke = yield getJoke();\n    yield put({\n      type: \"UPDATE_JOKE_SUCCESS\",\n      payload: joke\n    });\n  } catch (e) {\n    yield put({\n      type: \"UPDATE_JOKE_FAILED\",\n      message: e.message\n    });\n  }\n} // Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\n\n\nfunction* jokeSaga() {\n  yield takeLatest(\"UPDATE_JOKE\", fetchJoke);\n}\n\nexport default jokeSaga;","map":{"version":3,"sources":["/Users/abdemirza/Projects/reduxx/src/sagas/jokeSaga.js"],"names":["put","takeEvery","takeLatest","getJoke","res","fetch","result","json","value","fetchJoke","joke","type","payload","e","message","jokeSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,UAAzB,QAA2C,oBAA3C,C,CAEA;;AACA,MAAMC,OAAO,GAAG,YAAY;AAC1B,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,yCAAD,CAAvB;AACA,QAAMC,MAAM,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAArB;AACA,SAAOD,MAAM,CAACE,KAAd;AACD,CAJD,C,CAKA;;;AACA,UAAUC,SAAV,GAAsB;AACpB,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMP,OAAO,EAA1B;AACA,UAAMH,GAAG,CAAC;AAAEW,MAAAA,IAAI,EAAE,qBAAR;AAA+BC,MAAAA,OAAO,EAAEF;AAAxC,KAAD,CAAT;AACD,GAHD,CAGE,OAAOG,CAAP,EAAU;AACV,UAAMb,GAAG,CAAC;AAAEW,MAAAA,IAAI,EAAE,oBAAR;AAA8BG,MAAAA,OAAO,EAAED,CAAC,CAACC;AAAzC,KAAD,CAAT;AACD;AACF,C,CAED;;;AACA,UAAUC,QAAV,GAAqB;AACnB,QAAMb,UAAU,CAAC,aAAD,EAAgBO,SAAhB,CAAhB;AACD;;AAED,eAAeM,QAAf","sourcesContent":["import { put, takeEvery, takeLatest } from \"redux-saga/effects\";\n\n// ...\nconst getJoke = async () => {\n  const res = await fetch(\"https://api.chucknorris.io/jokes/random\");\n  const result = await res.json();\n  return result.value;\n};\n// Our worker Saga: will perform the async increment task\nfunction* fetchJoke() {\n  try {\n    const joke = yield getJoke();\n    yield put({ type: \"UPDATE_JOKE_SUCCESS\", payload: joke });\n  } catch (e) {\n    yield put({ type: \"UPDATE_JOKE_FAILED\", message: e.message });\n  }\n}\n\n// Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\nfunction* jokeSaga() {\n  yield takeLatest(\"UPDATE_JOKE\", fetchJoke);\n}\n\nexport default jokeSaga;\n"]},"metadata":{},"sourceType":"module"}